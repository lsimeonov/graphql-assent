// Code generated by mockery v1.0.0
package mocks

import "github.com/stretchr/testify/mock"

// IArgon2 is an autogenerated mock type for the IArgon2 type
type IArgon2 struct {
	mock.Mock
}

// EncodeToString provides a mock function with given fields: _a0
func (_m *IArgon2) EncodeToString(_a0 []byte) string {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func([]byte) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GenerateSalt provides a mock function with given fields: size
func (_m *IArgon2) GenerateSalt(size int) (string, error) {
	ret := _m.Called(size)

	var r0 string
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(size)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Key provides a mock function with given fields: password, salt, time, memory, threads, keyLen
func (_m *IArgon2) Key(password []byte, salt []byte, time uint32, memory uint32, threads uint8, keyLen uint32) []byte {
	ret := _m.Called(password, salt, time, memory, threads, keyLen)

	var r0 []byte
	if rf, ok := ret.Get(0).(func([]byte, []byte, uint32, uint32, uint8, uint32) []byte); ok {
		r0 = rf(password, salt, time, memory, threads, keyLen)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}
